
** SQL 必知必会

*** 检索数据

**** 检索单个列
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_name
       FROM Products;
     #+END_SRC

     #+RESULTS:

     | prod_name           |
     |---------------------|
     | Fish bean bag toy   |
     | Bird bean bag toy   |
     | Rabbit bean bag toy |
     | 8 inch teddy bear   |
     | 12 inch teddy bear  |
     | 18 inch teddy bear  |
     | Raggedy Ann         |
     | King doll           |
     | Queen doll          |

**** 检索多个列
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_id, prod_name, prod_price
       FROM Products;
     #+END_SRC

     #+RESULTS:
     | prod_id | prod_name           | prod_price |
     |---------+---------------------+------------|
     | BNBG01  | Fish bean bag toy   |       3.49 |
     | BNBG02  | Bird bean bag toy   |       3.49 |
     | BNBG03  | Rabbit bean bag toy | http.client.RemoteDisconnected:      3.49 |
     | BR01    | 8 inch teddy bear   |       5.99 |
     | BR02    | 12 inch teddy bear  |       8.99 |
     | BR03    | 18 inch teddy bear  |    untu-mono-derivative-powerline-git  11.99 |
     | RGAN01  | Raggedy Ann         |       4.99 |
     | RYL01   | King doll           |       9.49 |
     | RYL02   | Queen doll          |       9.49 |

**** 检索所有列
     #+BEGIN_SRC sql
       SELECT *
       FROM Products;
     #+END_SRC

**** 检索不同的值
     DINSTINCT 关键字作用于所有的列
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT DISTINCT vend_id
       FROM Products;
     #+END_SRC

     #+RESULTS:
     | vend_id |
     |---------|
     | BRS01   |
     | DLL01   |
     | FNG01   |

**** 限制结果
     显示指定行数据
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_name
       FROM Products
       LIMIT 5;

       SELECT prod_name
       FROM Products
       LIMIT 5 OFFSET 5;
     #+END_SRC

     #+RESULTS:
     | prod_name           |
     |---------------------|
     | Fish bean bag toy   |
     | Bird bean bag toy   |
     | Rabbit bean bag toy |
     | 8 inch teddy bear   |
     | 12 inch teddy bear  |

     | prod_name           |
     | 18 inch teddy bear  |
     | Raggedy Ann         |
     | King doll           |
     | Queen doll          |

     LIMIT 5 指示 MySQL 返回不超过５行的数据;
     LIMIT 5 OFFSET 5 指示 MySQL 从第５行起的５行数据；

**** 使用注释
     1. 行内注释
        #+BEGIN_SRC sql
          SELECT prod_name -- 这是一条注释
          FROM Products;
        #+END_SRC
     2. 整行注释
        #+BEGIN_SRC sql
          # 这是一条注释
          SELECT prod_name
          FORM Products;
        #+END_SRC
     3. 多行注释
        #+BEGIN_SRC sql
          /* 这是多行
          注释*/
          SELECT prod_name
          FROM Products;
        #+END_SRC

*** 排序检索数据 
**** 排序数据
     ORDER BY 子句取一个或多个列的名字，据此对输出进行排序：
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_name
       FROM Products
       ORDER BY prod_name;
     #+END_SRC

     #+RESULTS:
     | prod_name           |
     |---------------------|
     | 12 inch teddy bear  |
     | 18 inch teddy bear  |
     | 8 inch teddy bear   |
     | Bird bean bag toy   |
     | Fish bean bag toy   |
     | King doll           |
     | Queen doll          |
     | Rabbit bean bag toy |
     | Raggedy Ann         |
     对 prod_name 列以字母顺序排序数据
     注意：在指定 ORDER BY 子句时，应该保证它是 SELECT 语句中最后一条子句，如果它不是最后的子句，将会出现错误信息。
     通常，ORDER BY 子句中使用的列僵尸为显示而选择的列。但是，实际上并不一定要这样，用非检索的列排序数据是完全合法的。

**** 按多个列排序
     要按多个列排序，简单指定列名，列名之间用逗号分开即可。
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_id, prod_price, prod_name
       FROM Products
       ORDER BY prod_price, prod_name;
     #+END_SRC

     #+RESULTS:
     | prod_id | prod_price | prod_name           |
     |---------+------------+---------------------|
     | BNBG02  |       3.49 | Bird bean bag toy   |
     | BNBG01  |       3.49 | Fish bean bag toy   |
     | BNBG03  |       3.49 | Rabbit bean bag toy |
     | RGAN01  |       4.99 | Raggedy Ann         |
     | BR01    |       5.99 | 8 inch teddy bear   |
     | BR02    |       8.99 | 12 inch teddy bear  |
     | RYL01   |       9.49 | King doll           |
     | RYL02   |       9.49 | Queen doll          |
     | BR03    |      11.99 | 18 inch teddy bear  |

**** 按列位置排序
     ORDER BY 还支持按相对列位置进行排序。
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_id, prod_price, prod_name
       FROM Products
       ORDER BY 2, 3;
     #+END_SRC

     #+RESULTS:
     | prod_id | prod_price | prod_name           |
     |---------+------------+---------------------|
     | BNBG02  |       3.49 | Bird bean bag toy   |
     | BNBG01  |       3.49 | Fish bean bag toy   |
     | BNBG03  |       3.49 | Rabbit bean bag toy |
     | RGAN01  |       4.99 | Raggedy Ann         |
     | BR01    |       5.99 | 8 inch teddy bear   |
     | BR02    |       8.99 | 12 inch teddy bear  |
     | RYL01   |       9.49 | King doll           |
     | RYL02   |       9.49 | Queen doll          |
     | BR03    |      11.99 | 18 inch teddy bear  |
     这里用列的相对位置编号取代列名进行排序。
   
**** 指定排序方向
     默认排序是升序。
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_id, prod_price, prod_name
       FROM Products
       ORDER BY prod_price DESC;

       SELECT prod_id, prod_price, prod_name
       FROM Products
       ORDER BY prod_price DESC, prod_name;
     #+END_SRC

     #+RESULTS:
     | prod_id | prod_price | prod_name           |
     |---------+------------+---------------------|
     | BR03    |      11.99 | 18 inch teddy bear  |
     | RYL01   |       9.49 | King doll           |
     | RYL02   |       9.49 | Queen doll          |
     | BR02    |       8.99 | 12 inch teddy bear  |
     | BR01    |       5.99 | 8 inch teddy bear   |
     | RGAN01  |       4.99 | Raggedy Ann         |
     | BNBG01  |       3.49 | Fish bean bag toy   |
     | BNBG02  |       3.49 | Bird bean bag toy   |
     | BNBG03  |       3.49 | Rabbit bean bag toy |

     | prod_id | prod_price | prod_name           |
     | BR03    |      11.99 | 18 inch teddy bear  |
     | RYL01   |       9.49 | King doll           |
     | RYL02   |       9.49 | Queen doll          |
     | BR02    |       8.99 | 12 inch teddy bear  |
     | BR01    |       5.99 | 8 inch teddy bear   |
     | RGAN01  |       4.99 | Raggedy Ann         |
     | BNBG02  |       3.49 | Bird bean bag toy   |
     | BNBG01  |       3.49 | Fish bean bag toy   |
     | BNBG03  |       3.49 | Rabbit bean bag toy |

*** 过滤数据
**** 使用 where 子句
     在 SELECT 语句中，数据根据 WHERE 子句中指定的搜索条件进行过滤。
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_name, prod_price
       FROM Products
       WHERE prod_price = 3.49;
     #+END_SRC

     #+RESULTS:
     | prod_name           | prod_price |
     |---------------------+------------|
     | Fish bean bag toy   |       3.49 |
     | Bird bean bag toy   |       3.49 |
     | Rabbit bean bag toy |       3.49 |
     Tips:
     			在同时使用 ORDER BY 和 WHERE 子句时，应该让 ORDER BY 位于 WHERE 之后。

**** WHERE 子句操作符

     | 操作符  | 说明               |
     |---------+--------------------|
     | =       | 等于               |
     | <>      | 不等于             |
     | !=      | 不等于             |
     | <       | 小于               |
     | <=      | 小于等于           |
     | !<      | 不小于             |
     | >       | 大于               |
     | >=      | 大于等于           |
     | !>      | 不大于             |
     | BETWEEN | 在指定的两个值之间 |
     | IS NULL | 为 NULL 值         |

***** 检查单个值
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_name, prod_price
        FROM Products
        WHERE prod_price < 10;
      #+END_SRC

      #+RESULTS:
      | prod_name           | prod_price |
      |---------------------+------------|
      | Fish bean bag toy   |       3.49 |
      | Bird bean bag toy   |       3.49 |
      | Rabbit bean bag toy |       3.49 |
      | 8 inch teddy bear   |       5.99 |
      | 12 inch teddy bear  |       8.99 |
      | Raggedy Ann         |       4.99 |
      | King doll           |       9.49 |
      | Queen doll          |       9.49 |
      
***** 不匹配查询
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT vend_id, prod_name
        FROM Products
        WHERE vend_id <> 'DLL01';
      #+END_SRC

      #+RESULTS:
      | vend_id | prod_name          |
      |---------+--------------------|
      | BRS01   | 8 inch teddy bear  |
      | BRS01   | 12 inch teddy bear |
      | BRS01   | 18 inch teddy bear |
      | FNG01   | King doll          |
      | FNG01   | Queen doll         |

***** 范围值检查
      使用 BETWEEN 操作符检查某个范围值
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_name, prod_price
        FROM Products
        WHERE prod_price BETWEEN 5 AND 10;
      #+END_SRC

      #+RESULTS:
      | prod_name          | prod_price |
      |--------------------+------------|
      | 8 inch teddy bear  |       5.99 |
      | 12 inch teddy bear |       8.99 |
      | King doll          |       9.49 |
      | Queen doll         |       9.49 |

***** 空值检查
      NULL 无值（no value），它与字段包含０、空字符串或仅仅包含空格不同。
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT cust_name
        FROM Customers
        WHERE cust_email IS NULL;
      #+END_SRC

      #+RESULTS:
      | cust_name     |
      |---------------|
      | Kids Place    |
      | The Toy Store |
*** 高级数据过滤
**** 组合 WHERE 子句
     多个 WHERE 子句进行数据过滤；有 AND 子句或 OR 子句
***** AND 操作符
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_id, prod_price, prod_name
        FROM Products
        WHERE vend_id = 'DLL01' AND prod_price <=4;
      #+END_SRC

      #+RESULTS:
      | prod_id | prod_price | prod_name           |
      |---------+------------+---------------------|
      | BNBG01  |       3.49 | Fish bean bag toy   |
      | BNBG02  |       3.49 | Bird bean bag toy   |
      | BNBG03  |       3.49 | Rabbit bean bag toy |
***** OR 操作符
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_name, prod_price
        FROM Products

        WHERE vend_id = 'DLL01' OR vend_id = 'BRS01';
      #+END_SRC

      #+RESULTS:
      | prod_name           | prod_price |
      |---------------------+------------|
      | Fish bean bag toy   |       3.49 |
      | Bird bean bag toy   |       3.49 |
      | Rabbit bean bag toy |       3.49 |
      | 8 inch teddy bear   |       5.99 |
      | 12 inch teddy bear  |       8.99 |
      | 18 inch teddy bear  |      11.99 |
      | Raggedy Ann         |       4.99 |
***** 求值顺序
      SQL 在处理 OR 操作符，优先处理 AND 操作符。
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_name, prod_price
        FROM Products
        WHERE vend_id = 'DLL01' OR vend_id = 'BRS01'
        AND prod_price >= 10;

        SELECT prod_name, prod_price
        FROM Products
        WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01')
        AND prod_price >= 10;
      #+END_SRC

      #+RESULTS:
      | prod_name           | prod_price |
      |---------------------+------------|
      | Fish bean bag toy   |       3.49 |
      | Bird bean bag toy   |       3.49 |
      | Rabbit bean bag toy |       3.49 |
      | 18 inch teddy bear  |      11.99 |
      | Raggedy Ann         |       4.99 |

      | prod_name           | prod_price |
      | 18 inch teddy bear  |      11.99 |
      Tips:
      		任何时候使用具有 AND 和 OR 操作符的 WHERE 子句，都应该使用圆括号明确地分组操作符。
***** IN 操作符
      IN 操作符用来指定条件范围
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_name, prod_price
        FROM Products
        WHERE vend_id IN ('DLL01', 'BRS01')
        ORDER BY prod_name;
      #+END_SRC

      #+RESULTS:
      | prod_name           | prod_price |
      |---------------------+------------|
      | 12 inch teddy bear  |       8.99 |
      | 18 inch teddy bear  |      11.99 |
      | 8 inch teddy bear   |       5.99 |
      | Bird bean bag toy   |       3.49 |
      | Fish bean bag toy   |       3.49 |
      | Rabbit bean bag toy |       3.49 |
      | Raggedy Ann         |       4.99 |
      Tips:
      		使用 IN 操作符的有点：
          	+ 在有很多合法的选项时，IN 操作符的语法更清楚，更直观；
            + 在与其他 AND 和 OR 操作符组合使用 IN 时，求值顺序更容易管理；
            + IN 操作符一般比一组 OR 操作符执行的更快；
            + IN 的最大有点是包含其他 SELECT 语句，能够更动态地建立 WHERE子句；
