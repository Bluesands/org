#+TITLE: SQL 必知必会
#+OPTIONS: H:2 num:t toc:t \n:nil @:t ::t |:t ^:{} f:t
#+KEYWORDS: SQL Grammar

*** 检索数据
**** 检索单个列
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_name
       FROM Products;
     #+END_SRC

     #+RESULTS:

     | prod_name           |
     |---------------------|
     | Fish bean bag toy   |
     | Bird bean bag toy   |
     | Rabbit bean bag toy |
     | 8 inch teddy bear   |
     | 12 inch teddy bear  |
     | 18 inch teddy bear  |
     | Raggedy Ann         |
     | King doll           |
     | Queen doll          |

**** 检索多个列
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_id, prod_name, prod_price
       FROM Products;
     #+END_SRC

     #+RESULTS:
     | prod_id | prod_name           | prod_price |
     |---------+---------------------+------------|
     | BNBG01  | Fish bean bag toy   |       3.49 |
     | BNBG02  | Bird bean bag toy   |       3.49 |
     | BNBG03  | Rabbit bean bag toy | http.client.RemoteDisconnected:      3.49 |
     | BR01    | 8 inch teddy bear   |       5.99 |
     | BR02    | 12 inch teddy bear  |       8.99 |
     | BR03    | 18 inch teddy bear  |    untu-mono-derivative-powerline-git  11.99 |
     | RGAN01  | Raggedy Ann         |       4.99 |
     | RYL01   | King doll           |       9.49 |
     | RYL02   | Queen doll          |       9.49 |

**** 检索所有列
     #+BEGIN_SRC sql
       SELECT *
       FROM Products;
     #+END_SRC

**** 检索不同的值
     DINSTINCT 关键字作用于所有的列
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT DISTINCT vend_id
       FROM Products;
     #+END_SRC

     #+RESULTS:
     | vend_id |
     |---------|
     | BRS01   |
     | DLL01   |
     | FNG01   |

**** 限制结果
     显示指定行数据
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_name
       FROM Products
       LIMIT 5;

       SELECT prod_name
       FROM Products
       LIMIT 5 OFFSET 5;
     #+END_SRC

     #+RESULTS:
     | prod_name           |
     |---------------------|
     | Fish bean bag toy   |
     | Bird bean bag toy   |
     | Rabbit bean bag toy |
     | 8 inch teddy bear   |
     | 12 inch teddy bear  |

     | prod_name           |
     | 18 inch teddy bear  |
     | Raggedy Ann         |
     | King doll           |
     | Queen doll          |

     LIMIT 5 指示 MySQL 返回不超过５行的数据;
     LIMIT 5 OFFSET 5 指示 MySQL 从第５行起的５行数据；

**** 使用注释
     1. 行内注释
        #+BEGIN_SRC sql
          SELECT prod_name -- 这是一条注释
          FROM Products;
        #+END_SRC
     2. 整行注释
        #+BEGIN_SRC sql
          # 这是一条注释
          SELECT prod_name
          FORM Products;
        #+END_SRC
     3. 多行注释
        #+BEGIN_SRC sql
          /* 这是多行
          注释*/
          SELECT prod_name
          FROM Products;
        #+END_SRC

*** 排序检索数据 
**** 排序数据
     ORDER BY 子句取一个或多个列的名字，据此对输出进行排序：
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_name
       FROM Products
       ORDER BY prod_name;
     #+END_SRC

     #+RESULTS:
     | prod_name           |
     |---------------------|
     | 12 inch teddy bear  |
     | 18 inch teddy bear  |
     | 8 inch teddy bear   |
     | Bird bean bag toy   |
     | Fish bean bag toy   |
     | King doll           |
     | Queen doll          |
     | Rabbit bean bag toy |
     | Raggedy Ann         |
     对 prod_name 列以字母顺序排序数据
     注意：在指定 ORDER BY 子句时，应该保证它是 SELECT 语句中最后一条子句，如果它不是最后的子句，将会出现错误信息。
     通常，ORDER BY 子句中使用的列僵尸为显示而选择的列。但是，实际上并不一定要这样，用非检索的列排序数据是完全合法的。

**** 按多个列排序
     要按多个列排序，简单指定列名，列名之间用逗号分开即可。
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_id, prod_price, prod_name
       FROM Products
       ORDER BY prod_price, prod_name;
     #+END_SRC

     #+RESULTS:
     | prod_id | prod_price | prod_name           |
     |---------+------------+---------------------|
     | BNBG02  |       3.49 | Bird bean bag toy   |
     | BNBG01  |       3.49 | Fish bean bag toy   |
     | BNBG03  |       3.49 | Rabbit bean bag toy |
     | RGAN01  |       4.99 | Raggedy Ann         |
     | BR01    |       5.99 | 8 inch teddy bear   |
     | BR02    |       8.99 | 12 inch teddy bear  |
     | RYL01   |       9.49 | King doll           |
     | RYL02   |       9.49 | Queen doll          |
     | BR03    |      11.99 | 18 inch teddy bear  |

**** 按列位置排序
     ORDER BY 还支持按相对列位置进行排序。
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_id, prod_price, prod_name
       FROM Products
       ORDER BY 2, 3;
     #+END_SRC

     #+RESULTS:
     | prod_id | prod_price | prod_name           |
     |---------+------------+---------------------|
     | BNBG02  |       3.49 | Bird bean bag toy   |
     | BNBG01  |       3.49 | Fish bean bag toy   |
     | BNBG03  |       3.49 | Rabbit bean bag toy |
     | RGAN01  |       4.99 | Raggedy Ann         |
     | BR01    |       5.99 | 8 inch teddy bear   |
     | BR02    |       8.99 | 12 inch teddy bear  |
     | RYL01   |       9.49 | King doll           |
     | RYL02   |       9.49 | Queen doll          |
     | BR03    |      11.99 | 18 inch teddy bear  |
     这里用列的相对位置编号取代列名进行排序。
   
**** 指定排序方向
     默认排序是升序。
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_id, prod_price, prod_name
       FROM Products
       ORDER BY prod_price DESC;

       SELECT prod_id, prod_price, prod_name
       FROM Products
       ORDER BY prod_price DESC, prod_name;
     #+END_SRC

     #+RESULTS:
     | prod_id | prod_price | prod_name           |
     |---------+------------+---------------------|
     | BR03    |      11.99 | 18 inch teddy bear  |
     | RYL01   |       9.49 | King doll           |
     | RYL02   |       9.49 | Queen doll          |
     | BR02    |       8.99 | 12 inch teddy bear  |
     | BR01    |       5.99 | 8 inch teddy bear   |
     | RGAN01  |       4.99 | Raggedy Ann         |
     | BNBG01  |       3.49 | Fish bean bag toy   |
     | BNBG02  |       3.49 | Bird bean bag toy   |
     | BNBG03  |       3.49 | Rabbit bean bag toy |

     | prod_id | prod_price | prod_name           |
     | BR03    |      11.99 | 18 inch teddy bear  |
     | RYL01   |       9.49 | King doll           |
     | RYL02   |       9.49 | Queen doll          |
     | BR02    |       8.99 | 12 inch teddy bear  |
     | BR01    |       5.99 | 8 inch teddy bear   |
     | RGAN01  |       4.99 | Raggedy Ann         |
     | BNBG02  |       3.49 | Bird bean bag toy   |
     | BNBG01  |       3.49 | Fish bean bag toy   |
     | BNBG03  |       3.49 | Rabbit bean bag toy |

*** 过滤数据
**** 使用 where 子句
     在 SELECT 语句中，数据根据 WHERE 子句中指定的搜索条件进行过滤。
     #+header: :engine mysql
     #+header: :dbhost localhost
     #+header: :dbuser root
     #+header: :dbpassword bfl123
     #+header: :database sql_test
     #+BEGIN_SRC sql
       SELECT prod_name, prod_price
       FROM Products
       WHERE prod_price = 3.49;
     #+END_SRC

     #+RESULTS:
     | prod_name           | prod_price |
     |---------------------+------------|
     | Fish bean bag toy   |       3.49 |
     | Bird bean bag toy   |       3.49 |
     | Rabbit bean bag toy |       3.49 |
     Tips:
     			在同时使用 ORDER BY 和 WHERE 子句时，应该让 ORDER BY 位于 WHERE 之后。

**** WHERE 子句操作符

     | 操作符  | 说明               |
     |---------+--------------------|
     | =       | 等于               |
     | <>      | 不等于             |
     | !=      | 不等于             |
     | <       | 小于               |
     | <=      | 小于等于           |
     | !<      | 不小于             |
     | >       | 大于               |
     | >=      | 大于等于           |
     | !>      | 不大于             |
     | BETWEEN | 在指定的两个值之间 |
     | IS NULL | 为 NULL 值         |

***** 检查单个值
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_name, prod_price
        FROM Products
        WHERE prod_price < 10;
      #+END_SRC

      #+RESULTS:
      | prod_name           | prod_price |
      |---------------------+------------|
      | Fish bean bag toy   |       3.49 |
      | Bird bean bag toy   |       3.49 |
      | Rabbit bean bag toy |       3.49 |
      | 8 inch teddy bear   |       5.99 |
      | 12 inch teddy bear  |       8.99 |
      | Raggedy Ann         |       4.99 |
      | King doll           |       9.49 |
      | Queen doll          |       9.49 |
      
***** 不匹配查询
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT vend_id, prod_name
        FROM Products
        WHERE vend_id <> 'DLL01';
      #+END_SRC

      #+RESULTS:
      | vend_id | prod_name          |
      |---------+--------------------|
      | BRS01   | 8 inch teddy bear  |
      | BRS01   | 12 inch teddy bear |
      | BRS01   | 18 inch teddy bear |
      | FNG01   | King doll          |
      | FNG01   | Queen doll         |

***** 范围值检查
      使用 BETWEEN 操作符检查某个范围值
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_name, prod_price
        FROM Products
        WHERE prod_price BETWEEN 5 AND 10;
      #+END_SRC

      #+RESULTS:
      | prod_name          | prod_price |
      |--------------------+------------|
      | 8 inch teddy bear  |       5.99 |
      | 12 inch teddy bear |       8.99 |
      | King doll          |       9.49 |
      | Queen doll         |       9.49 |

***** 空值检查
      NULL 无值（no value），它与字段包含０、空字符串或仅仅包含空格不同。
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT cust_name
        FROM Customers
        WHERE cust_email IS NULL;
      #+END_SRC

      #+RESULTS:
      | cust_name     |
      |---------------|
      | Kids Place    |
      | The Toy Store |
*** 高级数据过滤
**** 组合 WHERE 子句
     多个 WHERE 子句进行数据过滤；有 AND 子句或 OR 子句
***** AND 操作符
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_id, prod_price, prod_name
        FROM Products
        WHERE vend_id = 'DLL01' AND prod_price <=4;
      #+END_SRC

      #+RESULTS:
      | prod_id | prod_price | prod_name           |
      |---------+------------+---------------------|
      | BNBG01  |       3.49 | Fish bean bag toy   |
      | BNBG02  |       3.49 | Bird bean bag toy   |
      | BNBG03  |       3.49 | Rabbit bean bag toy |
***** OR 操作符
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_name, prod_price
        FROM Products

        WHERE vend_id = 'DLL01' OR vend_id = 'BRS01';
      #+END_SRC

      #+RESULTS:
      | prod_name           | prod_price |
      |---------------------+------------|
      | Fish bean bag toy   |       3.49 |
      | Bird bean bag toy   |       3.49 |
      | Rabbit bean bag toy |       3.49 |
      | 8 inch teddy bear   |       5.99 |
      | 12 inch teddy bear  |       8.99 |
      | 18 inch teddy bear  |      11.99 |
      | Raggedy Ann         |       4.99 |
***** 求值顺序
      SQL 在处理 OR 操作符，优先处理 AND 操作符。
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_name, prod_price
        FROM Products
        WHERE vend_id = 'DLL01' OR vend_id = 'BRS01'
        AND prod_price >= 10;

        SELECT prod_name, prod_price
        FROM Products
        WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01')
        AND prod_price >= 10;
      #+END_SRC

      #+RESULTS:
      | prod_name           | prod_price |
      |---------------------+------------|
      | Fish bean bag toy   |       3.49 |
      | Bird bean bag toy   |       3.49 |
      | Rabbit bean bag toy |       3.49 |
      | 18 inch teddy bear  |      11.99 |
      | Raggedy Ann         |       4.99 |

      | prod_name           | prod_price |
      | 18 inch teddy bear  |      11.99 |
      Tips:
      		任何时候使用具有 AND 和 OR 操作符的 WHERE 子句，都应该使用圆括号明确地分组操作符。
***** IN 操作符
      IN 操作符用来指定条件范围
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_name, prod_price
        FROM Products
        WHERE vend_id IN ('DLL01', 'BRS01')
        ORDER BY prod_name;
      #+END_SRC

      #+RESULTS:
      | prod_name           | prod_price |
      |---------------------+------------|
      | 12 inch teddy bear  |       8.99 |
      | 18 inch teddy bear  |      11.99 |
      | 8 inch teddy bear   |       5.99 |
      | Bird bean bag toy   |       3.49 |
      | Fish bean bag toy   |       3.49 |
      | Rabbit bean bag toy |       3.49 |
      | Raggedy Ann         |       4.99 |
      Tips:
      		使用 IN 操作符的有点：
          	+ 在有很多合法的选项时，IN 操作符的语法更清楚，更直观；
            + 在与其他 AND 和 OR 操作符组合使用 IN 时，求值顺序更容易管理；
            + IN 操作符一般比一组 OR 操作符执行的更快；
            + IN 的最大有点是包含其他 SELECT 语句，能够更动态地建立 WHERE 子句；
***** NOT 操作符
      WHERE 子句中的 NOT 操作符有且只有一个功能，那就是否定其后所跟的任何条件。
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_name
        FROM Products
        WHERE NOT vend_id = 'DLL01'
        ORDER BY prod_name;
      #+END_SRC

      #+RESULTS:
      | prod_name          |
      |--------------------|
      | 12 inch teddy bear |
      | 18 inch teddy bear |
      | 8 inch teddy bear  |
      | King doll          |
      | Queen doll         |
*** 用通配符进行过滤
**** LIKE 操作符
     *通配符（wildcard）*
     用来匹配值的一部分的特殊字符。
     *搜索模式（search pattern）*
     由字面值、通配符或两者组合构成的搜索条件。
***** 百分号（%）通配符
      最常使用的通配符是百分号（%）。在搜索串中，%表示任何字符出现任意次数。
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_id, prod_name
        FROM Products
        WHERE prod_name LIKE 'Fish%';

        # 通配符可在搜索模式中的任意位置使用
        SELECT prod_id, prod_name
        FROM Products
        WHERE prod_name LIKE '%bean bag%';
      #+END_SRC

      #+RESULTS:
      | prod_id | prod_name           |
      |---------+---------------------|
      | BNBG01  | Fish bean bag toy   |

      | prod_id | prod_name           |
      | BNBG01  | Fish bean bag toy   |
      | BNBG02  | Bird bean bag toy   |
      | BNBG03  | Rabbit bean bag toy |
      *Tips:*
      		/%代表搜索模式中给定位置的０个、１个或多个字符。但不会匹配 NULL/
***** 下划线（_）通配符
      下划线只匹配单个字符。
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT prod_id, prod_name
        FROM Products
        WHERE prod_name LIKE '__ inch teddy bear';
      #+END_SRC

      #+RESULTS:
      | prod_id | prod_name          |
      |---------+--------------------|
      | BR02    | 12 inch teddy bear |
      | BR03    | 18 inch teddy bear |
***** 方括号（[]）通配符
      方括号（）通配符用来指定一个字符集，它必须匹配指定位置（通配符的位置）的一个字符。
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT cust_contact
        FROM Customers
        WHERE cust_contact LIKE '[JM]%'
        ORDER BY cust_contact;
      #+END_SRC

      #+RESULTS:
      *Tips:*
      			/只有微软的 Access 和 SQL Server 支持集合/
**** 使用通配符的技巧
     + 不要过度使用通配符。如果其他操作符能够达到相同的目的，应该使用其他操作符。
     + 在确定需要使用通配符时，也尽量不要把它们用在搜索模式的开始处。把通配符置于开始处，搜索起来是最慢的。
     + 仔细注意通配符的位置。如果放错了地方，可能不会返回想要的数据
**** 函数
     *DBMS 函数的差异*
		 | 函数                 | Access   | DB2            | Oracle    | PostgreSQL     | SQLite   | MySQL/MariaDB | SQL Server  |
		 |----------------------+----------+----------------+-----------+----------------+----------+---------------+-------------|
		 | 提取字符串的组成部分 | MID()    | SUBSTR()       | SUBSTR()  | SUBSTR()       | SUBSTR() | SUBSTRING()   | SUBSTRING() |
		 | 数据类型转换         | 多个函数 | CAST()         | 多个函数  | CAST()         |          | CONVERT()     | CONVERT()   |
		 | 取当前日期           | NOW()    | CURRENT_DATE() | SYSDATE() | CURRENT_DATE() | DATE()   | CURDATE()     | GETDATE()   |
**** 使用函数
     大多说 SQL 实现支持一下类型的函数：
     + 用于处理文本字符串（如删除或填充值，转换值为大写或小写）的文本函数；
     + 用于在数值数据上进行算术操作（如返回绝对值，进行代数运算）的数值函数；
     + 用于处理日期和时间值并从这些值中提取特定成分（如返回两个日期之差，检查日期有效性）的日期和时间函数；
     + 返回 DBMS 正使用的特殊信息（如返回用户登录信息）的系统函数；
***** 文本处理函数
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT vend_name, UPPER(vend_name) AS vend_name_upcase
        FROM Vendors
        ORDER BY vend_name;
      #+END_SRC

      #+RESULTS:
      | vend_name       | vend_name_upcase |
      |-----------------+------------------|
      | Bear Emporium   | BEAR EMPORIUM    |
      | Bears R Us      | BEARS R US       |
      | Doll House Inc. | DOLL HOUSE INC.  |
      | Fun and Games   | FUN AND GAMES    |
      | Furball Inc.    | FURBALL INC.     |
      | Jouets et ours  | JOUETS ET OURS   |
      
      #+CAPTION: 常用的文本处理函数
      | 函数      | 备注                                                 | 说明                    |
      |-----------+------------------------------------------------------+-------------------------|
      | /         | <                                                    | >                       |
      | LEFT()    | 使用字符串函数                                       | 返回字符串左边的字符    |
      | LENGTH()  | 也使用 DATALENGTH()或 LEN()                          | 返回字符串的长度        |
      | LOWER()   | Access 使用 LCASE()                                  | 将字符串转换为小写      |
      | LTRIM()   |                                                      | 去掉字符串左边的空格    |
      | RIGHT()   |                                                      | 返回字符串右边的字符    |
      | RTRIM()   |                                                      | 去掉字符串右边的空格    |
      | SOUNDEX() | 将任何文本串转换为描述其语音表示的字母数字模式的算法 | 返回字符串的 SOUNDEX 值 |
      | UPPER()   | Access 使用 UCASE()                                  | 将字符串转换为大写      |

      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT cust_name, cust_contact
        FROM Customers
        WHERE SOUNDEX(cust_contact) = SOUNDEX('Michael Green')
      #+END_SRC

      #+RESULTS:
      | cust_name  | cust_contact   |
      |------------+----------------|
      | Kids Place | Michelle Green |
***** 日期和时间处理函数
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT order_num
        FROM Orders
        WHERE YEAR(order_date)=2012;
      #+END_SRC

      #+RESULTS:
      | order_num |
      |-----------|
      |     20005 |
      |     20006 |
      |     20007 |
      |     20008 |
      |     20009 |
***** 数值处理函数 
      | 函数   | 说明               |
      |--------+--------------------|
      | ABS()  | 返回一个数的绝对值 |
      | COS()  | 返回一个角度的余弦 |
      | EXP()  | 返回一个数的指数值 |
      | PI()   | 返回圆周率         |
      | SIN()  | 返回一个角度的正弦 |
      | SQRT() | 返回一个数的平方根 |
      | TAN()  | 返回一个数的正切   |
*** 汇总数据
**** 聚集函数
		1. 确定表中行数（或者满足某个条件或包含讴歌特定值的行数）；
    2. 获得表中某些行的和；
    3. 找出表列（或所有行或某些特定的行）的最大值、最小值、平均值。
    
    *聚集函数（aggregate function）*：对某些行运行的函数，计算并返回一个值。
    | 函数    | 说明             |
    |---------+------------------|
    | AVG()   | 返回某列的平均值 |
    | COUNT() | 返回某列的行数   |
    | MAX()   | 返回某列的最大值 |
    | MIN()   | 返回某列的最小值 |
    | SUM()   | 返回某列值之和   |
**** 聚集不同值
     + 对所有行执行计算，指定 ALL 参数或不指定参数；
     + 只包含不同的值，指定 DISTINCT 参数；
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT AVG(DISTINCT prod_price) AS avg_price
        FROM Products
        WHERE vend_id = 'DLL01';
      #+END_SRC

        #+RESULTS:
        | avg_price |
        |-----------|
        |  4.240000 |

**** 组合聚集函数
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT COUNT(*) AS num_items,
               MIN(prod_price) AS price_min,
               MAX(prod_price) AS price_max,
               AVG(prod_price) AS price_avg
        FROM Products;
      #+END_SRC

      #+RESULTS:
      | num_items | price_min | price_max | price_avg |
      |-----------+-----------+-----------+-----------|
      |         9 |      3.49 |     11.99 |  6.823333 |

*** 分组数据
**** 数据分组
     使用分组可以将数据分为多个逻辑组，对每个组进行聚集计算
**** 创建分组
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT vend_id, COUNT(*) AS num_prods
        FROM Products
        GROUP BY vend_id;
      #+END_SRC

      #+RESULTS:
      | vend_id | num_prods |
      |---------+-----------|
      | BRS01   |         3 |
      | DLL01   |         4 |
      | FNG01   |         2 |
      
      *在使用 GROUP BY 子句前，需要知道一些重要的规定：*
      + GROUP BY 子句可以包含任意数目的列，因而可以对分组进行嵌套，更细致地进行数据分组；
      + 如果在 GROUP BY 子句种嵌套了分组，数据将在最后指定的分组上进行汇总，换句话说，在建立分组时，指定的所有列都一起计算；
      + GROUP BY 子句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）。如果在 SELECT 中使用表达式，则必须在 GROUP BY 子句中指定相同的表达式，不能使用别名；
      + 大多数 SQL 实现不允许 GROUP BY 列带有长度可变的数据类型（如文本或备注型字段）；
      + 除聚集计算语句外，SELECT 语句中的每一列都必须在 GROUP BY 子句中给出；
      + 如果分组列中包含具有 NULL 值的行，则 NULL 将作为一个分组返回，如果列中有多行 NULL 值，它们将分为一组；
      + GROUP BY 子句必须出现在 WHERE 子句之后，ORDER BY 子句之前；

**** 过滤分组
     *HAVING*支持所有*WHERE*操作符,WHERE 过滤行，HAVING 过滤分组
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT cust_id, COUNT(*) AS orders
        FROM Orders
        GROUP BY cust_id
        HAVING COUNT(*) >=2;
      #+END_SRC

      #+RESULTS:
      |    cust_id | orders |
      |------------+--------|
      | 1000000001 |      2 |
      
      *HAVING 和 WHERE 的差别：*
      		WHERE 在数据分组钱进行过滤，HAVING 在数据分组后进行过滤。WHERE 排除的行不包括在分组中，这可能会改变计算值，从而影响 HAVING 子句中基于这些值过滤掉的分组。
     
      #+header: :engine mysql
      #+header: :dbhost localhost
      #+header: :dbuser root
      #+header: :dbpassword bfl123
      #+header: :database sql_test
      #+BEGIN_SRC sql
        SELECT vend_id, COUNT(*) AS num_prods
        FROM Products
        WHERE prod_price >= 4
        GROUP BY vend_id
        HAVING COUNT(*) >= 2;
      #+END_SRC

      #+RESULTS:
      | vend_id | num_prods |
      |---------+-----------|
      | BRS01   |         3 |
      | FNG01   |         2 |
**** 分组和排序
     GROUP BY 和 ORDER BY 经常完成相同的工作，区别如下：
     | ORDER BY                                  | GROUP BY                                               |
     |-------------------------------------------+--------------------------------------------------------|
     | 对产生的输出排序                          | 对行分组，单输出可能不是分组的顺序                     |
     | 任意列都可以使用（甚至非选择的也可以使用) | 只可能使用选择列或表达式，而且必须使用每个选择列表达式 |
     | 不一定需要                                | 如果与聚集函数一起使用列（或表达式），则必须使用       |


**** SELECT 子句顺序
*** 使用子查询
**** 子查询
**** 利用子查询进行过滤
**** 作为计算字段使用子查询
*** 联结表
**** 联结
**** 创建联结
*** 创建高级联结
**** 使用表别名
**** 使用不同类型的联结
**** 使用带聚集函数的联结
**** 使用联结和联结条件
*** 组合查询
**** 组合查询
**** 创建组合查询
*** 插入数据
**** 数据插入
**** 从一个表复制到另一个表
*** 更新和删除数据
**** 更新数据
**** 删除数据
**** 更新和删除数据的指导原则
*** 创建和操纵表
**** 创建表
**** 更新表
**** 删除表
**** 重命名表
*** 使用视图
**** 视图
**** 创建视图
*** 使用存储过程
**** 存储过程
**** 为什么要使用存储过程
**** 执行存储过程
**** 创建存储过程
*** 管理事务处理
**** 事务处理
**** 控制事务处理
*** 使用游标
**** 游标
**** 使用游标
*** 高级 SQL 特性
**** 约束
**** 索引
**** 触发器
**** 数据库安全
